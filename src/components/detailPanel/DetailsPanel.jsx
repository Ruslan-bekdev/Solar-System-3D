import React, {useEffect, useRef} from "react";
import styles from "./detailsPanel.module.less";
import DetailsMarquee from "../marquee/DetailsMarquee.jsx";

const DetailsPanel = ({focusRef, detailsPanelOpen, setDetailsPanelOpen}) => {
	const toggleOpen = () => setDetailsPanelOpen(p => !p);
	const displayName = focusRef.name || "–°–æ–ª–Ω—Ü–µ";
	const startsWithVowel = (text) => /^[–∞–µ—ë–∏–æ—É—ã—ç—é—è]/i.test(text);
	const name = (name) => {
		if (/–π$/i.test(name)) return name.slice(0, -1) + "–∏";
		if (/[–∞–µ—ë–∏–æ—É—ã—ç—é—è]$/i.test(name)) return name.slice(0, -1) + "–µ";
		return name + "–µ";
	};

	const scrollAreaRef = useRef(null);


	useEffect(() => {
		if (!detailsPanelOpen) return;

		const onWindowWheelCapture = (e) => {
			if (scrollAreaRef.current && scrollAreaRef.current.contains(e.target)) return;
			e.preventDefault();
			e.stopPropagation();
		};

		const onWindowTouchMoveCapture = (e) => {
			if (scrollAreaRef.current && scrollAreaRef.current.contains(e.target)) return;
			e.preventDefault();
			e.stopPropagation();
		};

		const stopPropOnly = (e) => {
			e.stopPropagation();
		};

		window.addEventListener("wheel", onWindowWheelCapture, {capture: true, passive: false});
		window.addEventListener("touchmove", onWindowTouchMoveCapture, {capture: true, passive: false});

		const area = scrollAreaRef.current;
		if (area) {
			area.addEventListener("wheel", stopPropOnly, {capture: true, passive: false});
			area.addEventListener("touchmove", stopPropOnly, {capture: true, passive: false});
		}

		return () => {
			window.removeEventListener("wheel", onWindowWheelCapture, {capture: true});
			window.removeEventListener("touchmove", onWindowTouchMoveCapture, {capture: true});
			if (area) {
				area.removeEventListener("wheel", stopPropOnly, {capture: true});
				area.removeEventListener("touchmove", stopPropOnly, {capture: true});
			}
		};
	}, [detailsPanelOpen]);


	return (
		<aside className={styles.detailsPanel}>
			<button onClick={toggleOpen}>
				{
					detailsPanelOpen
						? "–°–∫—Ä—ã—Ç—å (I)"
						: `–£–∑–Ω–∞—Ç—å ${startsWithVowel(displayName) ? "–æ–±" : "–æ"} ${name(displayName)} (I)`
				}
			</button>

			{detailsPanelOpen && (
				<div className={styles.panelContent}>
					<div className={styles.bgPlanets}></div>
					<h2>{displayName}</h2>

					<div className={styles.scrollArea} ref={scrollAreaRef}>
						<div className={styles.section}>
							<h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
							<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus aliquam aperiam aspernatur deserunt eius eum illum incidunt, ipsam, magnam maiores optio provident quae qui quidem recusandae reprehenderit, repudiandae suscipit tempora tempore ullam! Debitis delectus est facere in labore quod reiciendis sint unde.</p>
						</div>
						<div className={styles.glowDivider}></div>
						<div className={styles.section}>
							<h3>–ò—Å—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π</h3>
							<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet architecto aut beatae error, officia sapiente sint ullam. Animi neque placeat quos soluta tempore. A ad at, error fugit harum iusto laborum maiores mollitia natus optio quae ratione rem sint veritatis vitae, voluptatem?</p>
						</div>
						<div className={styles.glowDivider}></div>
						<div className={styles.section}>
							<h3>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã</h3>
							<ul>
								<li>üëå –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç 1</li>
								<li>üò¢ –ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç 2</li>
								<li>ü§î –ü–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É —Ñ–∞–∫—Ç 3</li>
							</ul>
						</div>
					</div>

					<DetailsMarquee items={[
						"üå° 5000¬∞C",
						"üåç –°–ø—É—Ç–Ω–∏–∫–æ–≤: 2",
						"üåÄ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: N‚ÇÇ",
						"üõ∞ –ü–µ—Ä–≤–∞—è —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω–∞",
						"üî• –°–∞–º–∞—è –≥–æ—Ä—è—á–∞—è",
						"üåå –°–∞–º–∞—è —è—Ä–∫–∞—è"
					]} />
				</div>
			)}
		</aside>
	);
};

export default DetailsPanel;
